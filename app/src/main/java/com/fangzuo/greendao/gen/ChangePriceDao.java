package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.ChangePrice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANGE_PRICE".
*/
public class ChangePriceDao extends AbstractDao<ChangePrice, Long> {

    public static final String TABLENAME = "CHANGE_PRICE";

    /**
     * Properties of entity ChangePrice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property FBillNo = new Property(1, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property FDate = new Property(2, String.class, "FDate", false, "FDATE");
        public final static Property FModel = new Property(3, String.class, "FModel", false, "FMODEL");
        public final static Property FNumber = new Property(4, String.class, "FNumber", false, "FNUMBER");
        public final static Property FName = new Property(5, String.class, "FName", false, "FNAME");
        public final static Property FUnit = new Property(6, String.class, "FUnit", false, "FUNIT");
        public final static Property FPriceOld = new Property(7, String.class, "FPriceOld", false, "FPRICE_OLD");
        public final static Property FPriceChange = new Property(8, String.class, "FPriceChange", false, "FPRICE_CHANGE");
        public final static Property FSupplier = new Property(9, String.class, "FSupplier", false, "FSUPPLIER");
        public final static Property FSpNo = new Property(10, String.class, "FSpNo", false, "FSP_NO");
        public final static Property FInterID = new Property(11, String.class, "FInterID", false, "FINTER_ID");
        public final static Property FEntryID = new Property(12, String.class, "FEntryID", false, "FENTRY_ID");
        public final static Property FItemID = new Property(13, String.class, "FItemID", false, "FITEM_ID");
        public final static Property FHasTax = new Property(14, String.class, "FHasTax", false, "FHAS_TAX");
    }


    public ChangePriceDao(DaoConfig config) {
        super(config);
    }
    
    public ChangePriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANGE_PRICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"FBILL_NO\" TEXT," + // 1: FBillNo
                "\"FDATE\" TEXT," + // 2: FDate
                "\"FMODEL\" TEXT," + // 3: FModel
                "\"FNUMBER\" TEXT," + // 4: FNumber
                "\"FNAME\" TEXT," + // 5: FName
                "\"FUNIT\" TEXT," + // 6: FUnit
                "\"FPRICE_OLD\" TEXT," + // 7: FPriceOld
                "\"FPRICE_CHANGE\" TEXT," + // 8: FPriceChange
                "\"FSUPPLIER\" TEXT," + // 9: FSupplier
                "\"FSP_NO\" TEXT," + // 10: FSpNo
                "\"FINTER_ID\" TEXT," + // 11: FInterID
                "\"FENTRY_ID\" TEXT," + // 12: FEntryID
                "\"FITEM_ID\" TEXT," + // 13: FItemID
                "\"FHAS_TAX\" TEXT);"); // 14: FHasTax
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANGE_PRICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChangePrice entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(2, FBillNo);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(3, FDate);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(4, FModel);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(5, FNumber);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(6, FName);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(7, FUnit);
        }
 
        String FPriceOld = entity.getFPriceOld();
        if (FPriceOld != null) {
            stmt.bindString(8, FPriceOld);
        }
 
        String FPriceChange = entity.getFPriceChange();
        if (FPriceChange != null) {
            stmt.bindString(9, FPriceChange);
        }
 
        String FSupplier = entity.getFSupplier();
        if (FSupplier != null) {
            stmt.bindString(10, FSupplier);
        }
 
        String FSpNo = entity.getFSpNo();
        if (FSpNo != null) {
            stmt.bindString(11, FSpNo);
        }
 
        String FInterID = entity.getFInterID();
        if (FInterID != null) {
            stmt.bindString(12, FInterID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(13, FEntryID);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(14, FItemID);
        }
 
        String FHasTax = entity.getFHasTax();
        if (FHasTax != null) {
            stmt.bindString(15, FHasTax);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChangePrice entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(2, FBillNo);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(3, FDate);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(4, FModel);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(5, FNumber);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(6, FName);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(7, FUnit);
        }
 
        String FPriceOld = entity.getFPriceOld();
        if (FPriceOld != null) {
            stmt.bindString(8, FPriceOld);
        }
 
        String FPriceChange = entity.getFPriceChange();
        if (FPriceChange != null) {
            stmt.bindString(9, FPriceChange);
        }
 
        String FSupplier = entity.getFSupplier();
        if (FSupplier != null) {
            stmt.bindString(10, FSupplier);
        }
 
        String FSpNo = entity.getFSpNo();
        if (FSpNo != null) {
            stmt.bindString(11, FSpNo);
        }
 
        String FInterID = entity.getFInterID();
        if (FInterID != null) {
            stmt.bindString(12, FInterID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(13, FEntryID);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(14, FItemID);
        }
 
        String FHasTax = entity.getFHasTax();
        if (FHasTax != null) {
            stmt.bindString(15, FHasTax);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChangePrice readEntity(Cursor cursor, int offset) {
        ChangePrice entity = new ChangePrice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FBillNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FModel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FUnit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FPriceOld
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FPriceChange
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FSupplier
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FSpNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FInterID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FEntryID
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FItemID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // FHasTax
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChangePrice entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFBillNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFPriceOld(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFPriceChange(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFSupplier(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFSpNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFInterID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFEntryID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFItemID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFHasTax(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChangePrice entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChangePrice entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChangePrice entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
